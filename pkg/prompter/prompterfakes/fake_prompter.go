// Code generated by counterfeiter. DO NOT EDIT.
package prompterfakes

import (
	"sync"

	"github.com/cagiti/yb/pkg/prompter"
)

type FakePrompter struct {
	SelectFromOptionsStub        func(string, []string) (string, error)
	selectFromOptionsMutex       sync.RWMutex
	selectFromOptionsArgsForCall []struct {
		arg1 string
		arg2 []string
	}
	selectFromOptionsReturns struct {
		result1 string
		result2 error
	}
	selectFromOptionsReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	SelectFromOptionsWithDefaultStub        func(string, string, []string) (string, error)
	selectFromOptionsWithDefaultMutex       sync.RWMutex
	selectFromOptionsWithDefaultArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 []string
	}
	selectFromOptionsWithDefaultReturns struct {
		result1 string
		result2 error
	}
	selectFromOptionsWithDefaultReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	SelectMultipleFromOptionsStub        func(string, []string) ([]string, error)
	selectMultipleFromOptionsMutex       sync.RWMutex
	selectMultipleFromOptionsArgsForCall []struct {
		arg1 string
		arg2 []string
	}
	selectMultipleFromOptionsReturns struct {
		result1 []string
		result2 error
	}
	selectMultipleFromOptionsReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePrompter) SelectFromOptions(arg1 string, arg2 []string) (string, error) {
	var arg2Copy []string
	if arg2 != nil {
		arg2Copy = make([]string, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.selectFromOptionsMutex.Lock()
	ret, specificReturn := fake.selectFromOptionsReturnsOnCall[len(fake.selectFromOptionsArgsForCall)]
	fake.selectFromOptionsArgsForCall = append(fake.selectFromOptionsArgsForCall, struct {
		arg1 string
		arg2 []string
	}{arg1, arg2Copy})
	stub := fake.SelectFromOptionsStub
	fakeReturns := fake.selectFromOptionsReturns
	fake.recordInvocation("SelectFromOptions", []interface{}{arg1, arg2Copy})
	fake.selectFromOptionsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePrompter) SelectFromOptionsCallCount() int {
	fake.selectFromOptionsMutex.RLock()
	defer fake.selectFromOptionsMutex.RUnlock()
	return len(fake.selectFromOptionsArgsForCall)
}

func (fake *FakePrompter) SelectFromOptionsCalls(stub func(string, []string) (string, error)) {
	fake.selectFromOptionsMutex.Lock()
	defer fake.selectFromOptionsMutex.Unlock()
	fake.SelectFromOptionsStub = stub
}

func (fake *FakePrompter) SelectFromOptionsArgsForCall(i int) (string, []string) {
	fake.selectFromOptionsMutex.RLock()
	defer fake.selectFromOptionsMutex.RUnlock()
	argsForCall := fake.selectFromOptionsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakePrompter) SelectFromOptionsReturns(result1 string, result2 error) {
	fake.selectFromOptionsMutex.Lock()
	defer fake.selectFromOptionsMutex.Unlock()
	fake.SelectFromOptionsStub = nil
	fake.selectFromOptionsReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakePrompter) SelectFromOptionsReturnsOnCall(i int, result1 string, result2 error) {
	fake.selectFromOptionsMutex.Lock()
	defer fake.selectFromOptionsMutex.Unlock()
	fake.SelectFromOptionsStub = nil
	if fake.selectFromOptionsReturnsOnCall == nil {
		fake.selectFromOptionsReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.selectFromOptionsReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakePrompter) SelectFromOptionsWithDefault(arg1 string, arg2 string, arg3 []string) (string, error) {
	var arg3Copy []string
	if arg3 != nil {
		arg3Copy = make([]string, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.selectFromOptionsWithDefaultMutex.Lock()
	ret, specificReturn := fake.selectFromOptionsWithDefaultReturnsOnCall[len(fake.selectFromOptionsWithDefaultArgsForCall)]
	fake.selectFromOptionsWithDefaultArgsForCall = append(fake.selectFromOptionsWithDefaultArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 []string
	}{arg1, arg2, arg3Copy})
	stub := fake.SelectFromOptionsWithDefaultStub
	fakeReturns := fake.selectFromOptionsWithDefaultReturns
	fake.recordInvocation("SelectFromOptionsWithDefault", []interface{}{arg1, arg2, arg3Copy})
	fake.selectFromOptionsWithDefaultMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePrompter) SelectFromOptionsWithDefaultCallCount() int {
	fake.selectFromOptionsWithDefaultMutex.RLock()
	defer fake.selectFromOptionsWithDefaultMutex.RUnlock()
	return len(fake.selectFromOptionsWithDefaultArgsForCall)
}

func (fake *FakePrompter) SelectFromOptionsWithDefaultCalls(stub func(string, string, []string) (string, error)) {
	fake.selectFromOptionsWithDefaultMutex.Lock()
	defer fake.selectFromOptionsWithDefaultMutex.Unlock()
	fake.SelectFromOptionsWithDefaultStub = stub
}

func (fake *FakePrompter) SelectFromOptionsWithDefaultArgsForCall(i int) (string, string, []string) {
	fake.selectFromOptionsWithDefaultMutex.RLock()
	defer fake.selectFromOptionsWithDefaultMutex.RUnlock()
	argsForCall := fake.selectFromOptionsWithDefaultArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakePrompter) SelectFromOptionsWithDefaultReturns(result1 string, result2 error) {
	fake.selectFromOptionsWithDefaultMutex.Lock()
	defer fake.selectFromOptionsWithDefaultMutex.Unlock()
	fake.SelectFromOptionsWithDefaultStub = nil
	fake.selectFromOptionsWithDefaultReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakePrompter) SelectFromOptionsWithDefaultReturnsOnCall(i int, result1 string, result2 error) {
	fake.selectFromOptionsWithDefaultMutex.Lock()
	defer fake.selectFromOptionsWithDefaultMutex.Unlock()
	fake.SelectFromOptionsWithDefaultStub = nil
	if fake.selectFromOptionsWithDefaultReturnsOnCall == nil {
		fake.selectFromOptionsWithDefaultReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.selectFromOptionsWithDefaultReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakePrompter) SelectMultipleFromOptions(arg1 string, arg2 []string) ([]string, error) {
	var arg2Copy []string
	if arg2 != nil {
		arg2Copy = make([]string, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.selectMultipleFromOptionsMutex.Lock()
	ret, specificReturn := fake.selectMultipleFromOptionsReturnsOnCall[len(fake.selectMultipleFromOptionsArgsForCall)]
	fake.selectMultipleFromOptionsArgsForCall = append(fake.selectMultipleFromOptionsArgsForCall, struct {
		arg1 string
		arg2 []string
	}{arg1, arg2Copy})
	stub := fake.SelectMultipleFromOptionsStub
	fakeReturns := fake.selectMultipleFromOptionsReturns
	fake.recordInvocation("SelectMultipleFromOptions", []interface{}{arg1, arg2Copy})
	fake.selectMultipleFromOptionsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePrompter) SelectMultipleFromOptionsCallCount() int {
	fake.selectMultipleFromOptionsMutex.RLock()
	defer fake.selectMultipleFromOptionsMutex.RUnlock()
	return len(fake.selectMultipleFromOptionsArgsForCall)
}

func (fake *FakePrompter) SelectMultipleFromOptionsCalls(stub func(string, []string) ([]string, error)) {
	fake.selectMultipleFromOptionsMutex.Lock()
	defer fake.selectMultipleFromOptionsMutex.Unlock()
	fake.SelectMultipleFromOptionsStub = stub
}

func (fake *FakePrompter) SelectMultipleFromOptionsArgsForCall(i int) (string, []string) {
	fake.selectMultipleFromOptionsMutex.RLock()
	defer fake.selectMultipleFromOptionsMutex.RUnlock()
	argsForCall := fake.selectMultipleFromOptionsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakePrompter) SelectMultipleFromOptionsReturns(result1 []string, result2 error) {
	fake.selectMultipleFromOptionsMutex.Lock()
	defer fake.selectMultipleFromOptionsMutex.Unlock()
	fake.SelectMultipleFromOptionsStub = nil
	fake.selectMultipleFromOptionsReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakePrompter) SelectMultipleFromOptionsReturnsOnCall(i int, result1 []string, result2 error) {
	fake.selectMultipleFromOptionsMutex.Lock()
	defer fake.selectMultipleFromOptionsMutex.Unlock()
	fake.SelectMultipleFromOptionsStub = nil
	if fake.selectMultipleFromOptionsReturnsOnCall == nil {
		fake.selectMultipleFromOptionsReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.selectMultipleFromOptionsReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakePrompter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.selectFromOptionsMutex.RLock()
	defer fake.selectFromOptionsMutex.RUnlock()
	fake.selectFromOptionsWithDefaultMutex.RLock()
	defer fake.selectFromOptionsWithDefaultMutex.RUnlock()
	fake.selectMultipleFromOptionsMutex.RLock()
	defer fake.selectMultipleFromOptionsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePrompter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ prompter.Prompter = new(FakePrompter)
